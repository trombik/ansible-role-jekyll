---

- name: Assert jekyll_user is not empty
  assert:
    that:
      - jekyll_user | length > 0

- name: "Include vars/{{ ansible_os_family }}.yml"
  include_vars: "{{ ansible_os_family }}.yml"

- name: "Include install-{{ ansible_os_family }}.yml"
  include: "install-{{ ansible_os_family }}.yml"

- name: Update jekyll_repositories (git)
  git:
    repo: "{{ item.config.repo }}"
    dest: "{{ item.config.dest }}"
    accept_hostkey: "{{ item.config.accept_hostkey | default(omit) }}"
    archive: "{{ item.config.archive | default(omit) }}"
    bare: "{{ item.config.bare | default(omit) }}"
    clone: "{{ item.config.clone | default(omit) }}"
    depth: "{{ item.config.depth | default(omit) }}"
    executable: "{{ item.config.executable | default(omit) }}"
    force: "{{ item.config.force | default(omit) }}"
    key_file: "{{ item.config.key_file | default(omit) }}"
    recursive: "{{ item.config.recursive | default(omit) }}"
    reference: "{{ item.config.reference | default(omit) }}"
    refspec: "{{ item.config.refspec | default(omit) }}"
    remote: "{{ item.config.remote | default(omit) }}"
    separate_git_dir: "{{ item.config.separate_git_dir | default(omit) }}"
    ssh_opts: "{{ item.config.ssh_opts | default(omit) }}"
    track_submodules: "{{ item.config.track_submodules | default(omit) }}"
    umask: "{{ item.config.umask | default(omit) }}"

    # XXX when a key of dict is `registered` word, you need this magic. what
    # it does is same as other arguments.
    update: "{% if 'update' in item['config'] %}{{ item['config']['update'] }}{% else %}{{ false | default(omit) }}{% endif %}"
    verify_commit: "{{ item.config.verify_commit | default(omit) }}"
    version: "{{ item.config.version | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
  with_items: "{{ jekyll_repositories }}"
  when:
    - "('state' in item and (item.state == 'present' or item.state == 'latest')) or (not 'state' in item)"
    - item.module == 'git'
  become: yes
  become_user: "{{ jekyll_user }}"
  register: __jekyll_updated
  notify:
    - Rebuild jekyll_repositories

- name: Remove jekyll_repositories
  with_items: "{{ jekyll_repositories }}"
  file:
    path: "{{ item.config.dest }}"
    state: absent
  when:
    - "'state' in item"
    - item.state == 'absent'

- name: Update gems
  bundler:
    binstub_directory: "{{ item.bundler.binstub_directory | default(omit) }}"
    chdir: "{{ item.config.dest }}"
    clean: "{{ item.bundler.clean | default(omit) }}"
    deployment_mode: "{{ item.bundler.deployment_mode | default(omit) }}"
    exclude_groups: "{{ item.bundler.exclude_groups | default(omit) }}"
    executable: "{{ item.bundler.executable | default(omit) }}"
    extra_args: "{{ item.bundler.extra_args | default(omit) }}"
    gem_path: "{{ item.bundler.gem_path | default(omit) }}"
    gemfile: "{{ item.bundler.gemfile | default(omit) }}"
    local: "{{ item.bundler.local | default(omit) }}"
    user_install: "{{ item.bundler.user_install | default(omit) }}"
    state: present
  with_items: "{{ jekyll_repositories }}"
  become: yes
  become_user: "{{ jekyll_user }}"
  when:
    - "('state' in item and item.state == 'present') or (not 'state' in item )"
    - item.module == 'git'
  notify:
    - Rebuild jekyll_repositories
